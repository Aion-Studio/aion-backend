datasource db {
  provider = "postgresql"
  url      = env("PRISMA__DATABASE__URL")
}

generator client {
  // provider = "cargo prisma"
  // The location to generate the client. Is relative to the position of the schemaschemour
  // output   = "../src/prisma.rs"
  provider = "prisma-client-js"
}

model Hero {
  id                          String            @id @default(uuid())
  name                        String            @default("Default name")
  aionCapacity                Int
  baseStatsId                 String            @unique @map("base_stats_id")
  attributesId                String            @unique @map("attributes_id")
  baseStats                   BaseStats         @relation(fields: [baseStatsId], references: [id])
  attributes                  Attributes        @relation(fields: [attributesId], references: [id])
  inventory                   Inventory         @relation(fields: [inventoryId], references: [id])
  inventoryId                 String            @unique @map("inventory_id")
  retinueSlots                RetinueSlot[]
  heroRegion                  HeroRegion[]
  actionsCompleted            ActionCompleted[]
  resources                   HeroResource[]
  stamina                     Int               @default(100)
  staminaMax                  Int               @default(100)
  staminaRegenRate            Int               @default(1)
  heroActions                 HeroActions[]
  heroQuests                  HeroQuests[]
  lastStaminaRegenerationTime DateTime?         @map("last_stamina_regeneration_time")
  heroTalents                 HeroTalent[]
  deck                        Deck?             @relation(fields: [deckId], references: [id])
  deckId                      String?           @unique @default(uuid())
  Cards                       HeroCard[]
}

model HeroResource {
  id             String       @id @default(uuid())
  heroId         String       @map("hero_id")
  hero           Hero         @relation(fields: [heroId], references: [id])
  resource       ResourceType @relation(fields: [resourceTypeId], references: [id])
  amount         Int
  resourceTypeId String       @map("resource_type_id")

  @@unique([heroId, resourceTypeId])
}

model Action {
  id          String  @id @default(uuid())
  name        String
  description String?
  region_name String  @map("region_name")
  Region      Region  @relation(fields: [region_name], references: [name])

  // Optional fields for Leyline and Quest
  leyline   Leyline? @relation(fields: [leylineId], references: [id])
  leylineId String?  @map("leyline_id")
  quest     Quest?   @relation(fields: [questId], references: [id])
  questId   String?  @map("quest_id")

  npc   Npc?    @relation("ActionToNpc", fields: [npcId], references: [id])
  npcId String? @map("npc_id")

  heroAction HeroActions[]

  cost Int? @default(0)

  @@unique([name, description, questId])
}

model HeroActions {
  id       String @id @default(uuid())
  heroId   String @map("hero_id")
  hero     Hero   @relation(fields: [heroId], references: [id])
  actionId String @map("action_id")
  action   Action @relation(fields: [actionId], references: [id])
}

model Quest {
  id             String       @id @default(uuid())
  title          String
  region_name    String       @map("region_name")
  Region         Region       @relation(fields: [region_name], references: [name])
  requiredQuests Quest[]      @relation("QuestRequirements")
  requiredBy     Quest[]      @relation("QuestRequirements")
  questNumber    Int
  actions        Action[]
  heroQuests     HeroQuests[]
  cost           Int          @default(0)
}

model HeroQuests {
  id        String  @id @default(uuid())
  heroId    String  @map("hero_id")
  hero      Hero    @relation(fields: [heroId], references: [id])
  questId   String  @map("quest_id")
  quest     Quest   @relation(fields: [questId], references: [id])
  accepted  Boolean @default(false)
  completed Boolean @default(false)
}

model ActionCompleted {
  id          String   @id @default(uuid())
  actionName  String   @map("action_name")
  heroId      String   @map("hero_id")
  hero        Hero     @relation(fields: [heroId], references: [id])
  updatedAt   DateTime @default(now()) @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")
  completedAt DateTime @default(now()) @map("completed_at")
  lootBox     Json     @default("{}") //
}

model HeroRegion {
  id               String  @id @default(uuid())
  HeroId           String  @map("hero_id")
  discovery_level  Float   @map("discovery_level")
  Hero             Hero    @relation(fields: [HeroId], references: [id])
  Region           Region  @relation(fields: [region_name], references: [name])
  region_name      String  @map("region_name")
  current_location Boolean @default(false) @map("current_location")
}

model BaseStats {
  id        String @id @default(uuid())
  level     Int
  xp        Int
  damageMin Int
  damageMax Int
  hitPoints Int    @map("hit_points")
  armor     Int
  hero      Hero?
}

model Attributes {
  id           String     @id @default(uuid())
  resilience   Int
  strength     Int
  agility      Int
  intelligence Int
  exploration  Int
  crafting     Int
  Hero         Hero?
  Follower     Follower[]
}

model Item {
  id                  String     @id @default(uuid())
  name                String
  weight              Int
  value               Int
  activeInventoryId   String?    @map("active_inventory_id")
  activeInventory     Inventory? @relation("active", fields: [activeInventoryId], references: [id])
  backpackInventoryId String?    @map("backpack_inventory_id")
  backpackInventory   Inventory? @relation("backpack", fields: [backpackInventoryId], references: [id])
}

model Inventory {
  id       String @id @default(uuid())
  active   Item[] @relation("active")
  backpack Item[] @relation("backpack")
  hero     Hero?
}

model RetinueSlot {
  id         String    @id @default(uuid())
  slotType   String
  HeroId     String    @map("hero_id")
  Hero       Hero      @relation(fields: [HeroId], references: [id])
  Follower   Follower? @relation(fields: [followerId], references: [id])
  followerId String?
}

model Follower {
  id           String        @id @default(uuid())
  name         String
  level        Int
  attributesId String        @map("attributes_id")
  attributes   Attributes    @relation(fields: [attributesId], references: [id])
  RetinueSlot  RetinueSlot[]

  followerTalents FollowerTalent[]
}

model ResourceType {
  id           String         @id @default(uuid())
  type         ResourceEnum
  HeroResource HeroResource[]

  @@unique([type])
}

enum ResourceEnum {
  Aion
  Valor
  NexusOrb
  StormShard
}

model ResourceCost {
  id       String       @id @default(uuid())
  resource ResourceEnum
  amount   Int
}

model Region {
  name             String       @id
  adjacent_regions String[]
  HeroRegion       HeroRegion[]
  Leylines         Leyline[]
  Actions          Action[]
  Quests           Quest[]
}

model Leyline {
  id                 String @id @default(uuid())
  name               String
  xp_reward          Int    @map("xp_reward")
  RegionName         String
  Region             Region @relation(fields: [RegionName], references: [name])
  discovery_required Int
  stamina_rate       Float
  aion_rate          Float

  npcId String @unique
  npc   Npc    @relation("NpcToLeyline", fields: [npcId], references: [id])

  actions Action[] // This will relate Leyline to many Actions
}

model Talent {
  id              String           @id @default(uuid())
  name            String
  description     String?
  cooldown        Int
  effects         Json
  heroTalents     HeroTalent[]
  followerTalents FollowerTalent[]
}

// Join table for Hero and Talent
model HeroTalent {
  heroId   String
  talentId String
  hero     Hero   @relation(fields: [heroId], references: [id])
  talent   Talent @relation(fields: [talentId], references: [id])

  @@id([heroId, talentId])
}

// Join table for Follower and Talent
model FollowerTalent {
  followerId String
  talentId   String
  follower   Follower @relation(fields: [followerId], references: [id])
  talent     Talent   @relation(fields: [talentId], references: [id])

  @@id([followerId, talentId])
}

model Npc {
  id         String @id @default(uuid())
  name       String
  level      Int
  armor      Int    @default(0)
  resilience Int
  strength   Int
  agility    Int
  damageMin  Int    @default(0)
  damageMax  Int    @default(0)
  hp         Int    @default(150)

  deck   Deck?   @relation(fields: [deckId], references: [id])
  deckId String? @unique @default(uuid())

  leyline Leyline?  @relation("NpcToLeyline")
  actions Action[]  @relation("ActionToNpc")
  NpcCard NpcCard[]
}

model Deck {
  id   String @id @default(uuid())
  Hero Hero?
  Npc  Npc?
}

model Card {
  id     String @id @default(uuid())
  name   String
  nation Nation
  rarity Rarity
  tier   Int
  imgUrl String @default("https://imagedelivery.net/OnMBHZ1Vl1a2W_jlBO5uVw/d1fdf798-a967-4a89-325f-22432cf29f00/lg")

  manaCost Int
  health   Int
  damage   Int

  cardType CardType

  HeroCards     HeroCard[]
  DeckCards     DeckCard[]
  SpellEffects  SpellEffect[]
  MinionEffects MinionEffect[]
  NpcCard       NpcCard[]
}

enum CardType {
  Spell
  Minion
}

model SpellEffect {
  id       String              @id @default(uuid())
  card     Card                @relation(fields: [cardId], references: [id])
  cardId   String
  duration Int                 @default(0)
  effects  SpellEffectEffect[]
}

model MinionEffect {
  id       String               @id @default(uuid())
  card     Card                 @relation(fields: [cardId], references: [id])
  cardId   String
  duration Int                  @default(0)
  effects  MinionEffectEffect[]
}

model SpellEffectEffect {
  id                 String            @id @default(uuid())
  spellEffect        SpellEffect       @relation(fields: [spellEffectId], references: [id])
  spellEffectId      String
  damageEffect       DamageEffect?     @relation(fields: [damageEffectId], references: [id])
  damageEffectId     String?
  healEffect         HealEffect?       @relation(fields: [healEffectId], references: [id])
  healEffectId       String?
  armorEffect        ArmorEffect?      @relation(fields: [armorEffectId], references: [id])
  armorEffectId      String?
  resilienceEffect   ResilienceEffect? @relation(fields: [resilienceEffectId], references: [id])
  resilienceEffectId String?
  poisonEffect       PoisonEffect?     @relation(fields: [poisonEffectId], references: [id])
  poisonEffectId     String?
  initiativeEffect   InitiativeEffect? @relation(fields: [initiativeEffectId], references: [id])
  initiativeEffectId String?
  stunEffect         StunEffect?       @relation(fields: [stunEffectId], references: [id])
  stunEffectId       String?
}

model MinionEffectEffect {
  id                 String            @id @default(uuid())
  minionEffect       MinionEffect      @relation(fields: [minionEffectId], references: [id])
  minionEffectId     String
  duration           Int               @default(0)
  tauntEffect        TauntEffect?      @relation(fields: [tauntEffectId], references: [id])
  tauntEffectId      String?
  chargeEffect       ChargeEffect?     @relation(fields: [chargeEffectId], references: [id])
  chargeEffectId     String?
  lifestealEffect    LifestealEffect?  @relation(fields: [lifestealEffectId], references: [id])
  lifestealEffectId  String?
  pickupEffect       PickupEffect?     @relation(fields: [pickupEffectId], references: [id])
  pickupEffectId     String?
  summonEffect       SummonEffect?     @relation(fields: [summonEffectId], references: [id])
  summonEffectId     String?
  resilienceEffect   ResilienceEffect? @relation(fields: [resilienceEffectId], references: [id])
  resilienceEffectId String?
  poisonEffect       PoisonEffect?     @relation(fields: [poisonEffectId], references: [id])
  poisonEffectId     String?
}

model DamageEffect {
  id           String              @id @default(uuid())
  spellEffects SpellEffectEffect[]
  amount       Int
  damageType   DamageType
  targetType   TargetType
}

model HealEffect {
  id           String              @id @default(uuid())
  spellEffects SpellEffectEffect[]
  amount       Int
  targetType   TargetType
}

model ArmorEffect {
  id           String              @id @default(uuid())
  spellEffects SpellEffectEffect[]
  amount       Int
}

model ResilienceEffect {
  id            String               @id @default(uuid())
  spellEffects  SpellEffectEffect[]
  minionEffects MinionEffectEffect[]
  amount        Int
}

model PoisonEffect {
  id            String               @id @default(uuid())
  spellEffects  SpellEffectEffect[]
  minionEffects MinionEffectEffect[]
  amount        Int
}

model InitiativeEffect {
  id           String              @id @default(uuid())
  spellEffects SpellEffectEffect[]

  amount Int
}

model StunEffect {
  id           String              @id @default(uuid())
  spellEffects SpellEffectEffect[]
}

model TauntEffect {
  id            String               @id @default(uuid())
  minionEffects MinionEffectEffect[]
}

model ChargeEffect {
  id            String               @id @default(uuid())
  minionEffects MinionEffectEffect[]
}

model LifestealEffect {
  id            String               @id @default(uuid())
  minionEffects MinionEffectEffect[]
}

model PickupEffect {
  id            String               @id @default(uuid())
  minionEffects MinionEffectEffect[]
  amount        Int
}

model SummonEffect {
  id            String               @id @default(uuid())
  minionEffects MinionEffectEffect[]
}

model HeroCard {
  id     String @id @default(uuid())
  heroId String
  cardId String
  hero   Hero   @relation(fields: [heroId], references: [id])
  card   Card   @relation(fields: [cardId], references: [id])

  @@unique([heroId, cardId])
}

model NpcCard {
  id     String @id @default(uuid())
  npcId  String
  cardId String
  npc    Npc    @relation(fields: [npcId], references: [id])
  card   Card   @relation(fields: [cardId], references: [id])

  @@unique([npcId, cardId])
}

model DeckCard {
  id       String @id @default(uuid())
  deckId   String
  cardId   String
  quantity Int    @default(1)
  card     Card   @relation(fields: [cardId], references: [id])

  @@unique([deckId, cardId])
}

enum TargetType {
  Minion
  Hero
  Both
}

enum DamageType {
  Physical
  Spell
  Chaos
}

enum Nation {
  Dusane
  Aylen
  Ironmark
  Kelidor
  Meta
}

enum Rarity {
  Common
  Magic
  Epic
  Legendary
}

// enum EffectEnum {
//   PhysicalDamage
//   SpellDamage
//   ChaosDamage
//   DamageOverTime
//   Stun
//   ReduceArmor
//   ReduceResilience
//   IncreaseArmor
//   IncreaseResilience
//   Heal
//   HealOverTime
//   DrawCards
//   ApplyPoison
//   RemovePoison
//   ApplyInitiative
//   RemoveInitiative
// }
