datasource db {
  provider = "postgresql"
  url      = env("PRISMA__DATABASE__URL")
}

generator client {
  provider = "cargo prisma"
  // The location to generate the client. Is relative to the position of the schema
  output   = "../src/prisma.rs"
}

model Hero {
  id               String            @id @default(uuid())
  name             String            @default("Default name")
  aionCapacity     Int
  aionCollected    Int
  baseStatsId      String            @unique @map("base_stats_id")
  attributesId     String            @unique @map("attributes_id")
  baseStats        BaseStats         @relation(fields: [baseStatsId], references: [id])
  attributes       Attributes        @relation(fields: [attributesId], references: [id])
  inventory        Inventory         @relation(fields: [inventoryId], references: [id])
  inventoryId      String            @unique @map("inventory_id")
  retinueSlots     RetinueSlot[]
  heroRegion       HeroRegion[]
  actionsCompleted ActionCompleted[]
  resources        HeroResource[]
  stamina          Int               @default(100)
  staminaMax       Int               @default(100)
  staminaRegenRate Int               @default(1)
  heroActions      HeroActions[]
  heroQuests       HeroQuests[]
}

model HeroResource {
  id             String       @id @default(uuid())
  heroId         String       @map("hero_id")
  hero           Hero         @relation(fields: [heroId], references: [id])
  resource       ResourceType @relation(fields: [resourceTypeId], references: [id])
  amount         Int
  resourceTypeId String       @map("resource_type_id")
}

model Action {
  id          String  @id @default(uuid())
  name        String
  description String?
  region_name String  @map("region_name")
  Region      Region  @relation(fields: [region_name], references: [name])

  // Optional fields for Leyline and Quest
  leyline    Leyline?      @relation(fields: [leylineId], references: [id])
  leylineId  String?       @map("leyline_id")
  quest      Quest?        @relation(fields: [questId], references: [id])
  questId    String?       @map("quest_id")
  heroAction HeroActions[]
  cost       Int?          @default(0)

  @@unique([name, description, questId])
}

model HeroActions {
  id       String @id @default(uuid())
  heroId   String @map("hero_id")
  hero     Hero   @relation(fields: [heroId], references: [id])
  actionId String @map("action_id")
  action   Action @relation(fields: [actionId], references: [id])
}

model Quest {
  id             String       @id @default(uuid())
  title          String
  region_name    String       @map("region_name")
  Region         Region       @relation(fields: [region_name], references: [name])
  requiredQuests Quest[]      @relation("QuestRequirements")
  requiredBy     Quest[]      @relation("QuestRequirements")
  questNumber    Int
  actions        Action[]
  heroQuests     HeroQuests[]
  cost           Int          @default(0)
}

model HeroQuests {
  id        String  @id @default(uuid())
  heroId    String  @map("hero_id")
  hero      Hero    @relation(fields: [heroId], references: [id])
  questId   String  @map("quest_id")
  quest     Quest   @relation(fields: [questId], references: [id])
  accepted  Boolean @default(false)
  completed Boolean @default(false)
}

model ActionCompleted {
  id          String   @id @default(uuid())
  actionName  String   @map("action_name")
  heroId      String   @map("hero_id")
  hero        Hero     @relation(fields: [heroId], references: [id])
  updatedAt   DateTime @default(now()) @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")
  completedAt DateTime @default(now()) @map("completed_at")
  lootBox     Json     @default("{}") //
}

model HeroRegion {
  id               String  @id @default(uuid())
  HeroId           String  @map("hero_id")
  discovery_level  Int     @map("discovery_level")
  Hero             Hero    @relation(fields: [HeroId], references: [id])
  Region           Region  @relation(fields: [region_name], references: [name])
  region_name      String  @map("region_name")
  current_location Boolean @default(false) @map("current_location")
}

model BaseStats {
  id        String @id @default(uuid())
  level     Int
  xp        Int
  damageMin Int
  damageMax Int
  hitPoints Int    @map("hit_points")
  armor     Int
  hero      Hero?
}

model Attributes {
  id           String     @id @default(uuid())
  resilience   Int
  strength     Int
  agility      Int
  intelligence Int
  exploration  Int
  crafting     Int
  Hero         Hero?
  Follower     Follower[]
}

model Item {
  id                  String     @id @default(uuid())
  name                String
  weight              Int
  value               Int
  activeInventoryId   String?    @map("active_inventory_id")
  activeInventory     Inventory? @relation("active", fields: [activeInventoryId], references: [id])
  backpackInventoryId String?    @map("backpack_inventory_id")
  backpackInventory   Inventory? @relation("backpack", fields: [backpackInventoryId], references: [id])
}

model Inventory {
  id       String @id @default(uuid())
  active   Item[] @relation("active")
  backpack Item[] @relation("backpack")
  hero     Hero?
}

model RetinueSlot {
  id         String    @id @default(uuid())
  slotType   String
  HeroId     String    @map("hero_id")
  Hero       Hero      @relation(fields: [HeroId], references: [id])
  Follower   Follower? @relation(fields: [followerId], references: [id])
  followerId String?
}

model Follower {
  id           String        @id @default(uuid())
  name         String
  level        Int
  attributesId String        @map("attributes_id")
  attributes   Attributes    @relation(fields: [attributesId], references: [id])
  RetinueSlot  RetinueSlot[]
}

model ResourceType {
  id           String         @id @default(uuid())
  type         ResourceEnum
  HeroResource HeroResource[]

  @@unique([type])
}

enum ResourceEnum {
  Aion
  Valor
  NexusOrb
  StormShard
}

model ResourceCost {
  id       String       @id @default(uuid())
  resource ResourceEnum
  amount   Int
}

model Region {
  name             String       @id
  adjacent_regions String[]
  HeroRegion       HeroRegion[]
  Leylines         Leyline[]
  Actions          Action[]
  Quests           Quest[]
}

model Leyline {
  id                 String @id @default(uuid())
  name               String
  xp_reward          Int    @map("xp_reward")
  RegionName         String
  Region             Region @relation(fields: [RegionName], references: [name])
  discovery_required Int
  stamina_rate       Float
  aion_rate          Float

  actions Action[] // This will relate Leyline to many Actions
}

// model ResourceValue {
//   id                   String             @id @default(uuid())
//   resource             ResourceType
//   value                Int
//   RegionActionResult   RegionActionResult @relation(fields: [regionActionResultId], references: [id])
//   regionActionResultId String
// }
