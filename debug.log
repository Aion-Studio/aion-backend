10:26:41 [DEBUG] (1) globset: glob converted to regex: Glob { glob: "**/npm-debug.log*", re: "(?-u)^(?:/?|.*/)npm\\-debug\\.log[^/]*$", opts: GlobOptions { case_insensitive: false, literal_separator: true, backslash_escape: true, empty_alternates: false }, tokens: Tokens([RecursivePrefix, Literal('n'), Literal('p'), Literal('m'), Literal('-'), Literal('d'), Literal('e'), Literal('b'), Literal('u'), Literal('g'), Literal('.'), Literal('l'), Literal('o'), Literal('g'), ZeroOrMore]) }
10:26:41 [DEBUG] (1) globset: glob converted to regex: Glob { glob: "**/yarn-debug.log*", re: "(?-u)^(?:/?|.*/)yarn\\-debug\\.log[^/]*$", opts: GlobOptions { case_insensitive: false, literal_separator: true, backslash_escape: true, empty_alternates: false }, tokens: Tokens([RecursivePrefix, Literal('y'), Literal('a'), Literal('r'), Literal('n'), Literal('-'), Literal('d'), Literal('e'), Literal('b'), Literal('u'), Literal('g'), Literal('.'), Literal('l'), Literal('o'), Literal('g'), ZeroOrMore]) }
10:26:41 [DEBUG] (1) globset: glob converted to regex: Glob { glob: "**/yarn-error.log*", re: "(?-u)^(?:/?|.*/)yarn\\-error\\.log[^/]*$", opts: GlobOptions { case_insensitive: false, literal_separator: true, backslash_escape: true, empty_alternates: false }, tokens: Tokens([RecursivePrefix, Literal('y'), Literal('a'), Literal('r'), Literal('n'), Literal('-'), Literal('e'), Literal('r'), Literal('r'), Literal('o'), Literal('r'), Literal('.'), Literal('l'), Literal('o'), Literal('g'), ZeroOrMore]) }
10:26:41 [DEBUG] (1) globset: built glob set; 6 literals, 4 basenames, 2 extensions, 0 prefixes, 0 suffixes, 1 required extensions, 3 regexes
10:26:41 [DEBUG] (1) globset: built glob set; 0 literals, 3 basenames, 0 extensions, 0 prefixes, 0 suffixes, 0 required extensions, 0 regexes
10:26:41 [DEBUG] (1) ignore::walk: ignoring ./target: Ignore(IgnoreMatch(Gitignore(Glob { from: Some("./.gitignore"), original: "**/target/", actual: "**/target", is_whitelist: false, is_only_dir: true })))
10:26:41 [DEBUG] (1) ignore::walk: ignoring ./prisma/node_modules: Ignore(IgnoreMatch(Gitignore(Glob { from: Some("./.gitignore"), original: "node_modules", actual: "**/node_modules", is_whitelist: false, is_only_dir: false })))
10:26:41 [DEBUG] (1) ignore::walk: ignoring ./prisma/.env: Ignore(IgnoreMatch(Gitignore(Glob { from: Some("./.gitignore"), original: ".env", actual: "**/.env", is_whitelist: false, is_only_dir: false })))
10:26:41 [DEBUG] (1) ignore::walk: ignoring ./prisma-cli/target: Ignore(IgnoreMatch(Gitignore(Glob { from: Some("./.gitignore"), original: "**/target/", actual: "**/target", is_whitelist: false, is_only_dir: true })))
10:26:41 [DEBUG] (1) ignore::walk: ignoring ./.env: Ignore(IgnoreMatch(Gitignore(Glob { from: Some("./.gitignore"), original: ".env", actual: "**/.env", is_whitelist: false, is_only_dir: false })))
10:26:41 [DEBUG] (1) globset: built glob set; 6 literals, 0 basenames, 0 extensions, 0 prefixes, 0 suffixes, 0 required extensions, 0 regexes
10:26:41 [DEBUG] (1) ignore::walk: ignoring ./.idea/workspace.xml: Ignore(IgnoreMatch(Gitignore(Glob { from: Some("./.idea/.gitignore"), original: "/workspace.xml", actual: "workspace.xml", is_whitelist: false, is_only_dir: false })))
10:26:43 [DEBUG] (1) lazytestr: Running selected test
10:29:38 [DEBUG] (1) lazytestr: Running selected test
10:30:00 [DEBUG] (1) lazytestr: Running selected test
10:30:20 [DEBUG] (1) lazytestr: Running selected test
10:31:02 [DEBUG] (1) lazytestr: Running selected test
10:31:49 [DEBUG] (1) lazytestr: Running selected test
10:39:16 [DEBUG] (1) lazytestr: Running selected test
10:40:00 [DEBUG] (1) lazytestr: Running selected test
10:40:36 [DEBUG] (1) lazytestr: Running selected test
10:40:39 [DEBUG] (1) lazytestr: Running selected test
11:27:10 [DEBUG] (1) lazytestr: Running selected test
11:32:28 [DEBUG] (1) lazytestr: Running selected test
11:50:47 [DEBUG] (1) lazytestr: Running selected test
11:51:54 [DEBUG] (1) lazytestr: Running selected test
